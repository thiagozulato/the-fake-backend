import { Method, Throttling } from './interfaces';
import { Middleware } from './types';

export class ThrottlingManager {
  private currentThrottlingIndex: number | null;
  private throttlings: Throttling[];

  /**
   * Creates a new throttling manager.
   *
   * @param throttlings The current list of throttlings
   */
  constructor(throttlings: Throttling[] = []) {
    this.currentThrottlingIndex = null;
    this.throttlings = throttlings;
  }

  /**
   * Resolve the delay for the current route and throttling.
   *
   * @param routeMethod Route method
   * @return Resolved delay
   */
  private resolveRouteDelay(routeMethod: Method) {
    return routeMethod.delay || this.getCurrentDelay();
  }

  /**
   * Get all throttlings.
   *
   * @return The current list of throttlings
   */
  getAll() {
    return this.throttlings;
  }

  /**
   * Get current throttling.
   *
   * @return The current throttling
   */
  getCurrent() {
    if (this.currentThrottlingIndex !== null) {
      return this.throttlings[this.currentThrottlingIndex];
    }
    return null;
  }

  /**
   * Get current proxy delay generating a random number between the throttling minimum and maximum milliseconds.
   *
   * @return A random number generated by throttling minimum and maximum milliseconds
   */
  getCurrentDelay() {
    const {
      values: [minimum, maximum],
    } = this.getCurrent() || { values: [0, 0] };
    return Math.ceil(Math.random() * (minimum - maximum) + maximum);
  }

  /**
   * Select the throttling and set it as current.
   * @param name The throttling name
   */
  toggleByName(name: string) {
    const current = this.throttlings.findIndex(
      (throttling) => throttling.name === name
    );

    if (current < 0) {
      this.currentThrottlingIndex = null;
      return;
    }

    this.currentThrottlingIndex = current;
  }

  /**
   * Toggle current throttling moving to the next position on list.
   */
  toggleCurrent() {
    if (this.currentThrottlingIndex === null) {
      this.currentThrottlingIndex = 0;
    } else if (this.currentThrottlingIndex === this.throttlings.length - 1) {
      this.currentThrottlingIndex = null;
    } else {
      this.currentThrottlingIndex += 1;
    }
  }

  /**
   * Create a middleware that delays the execution.
   */
  createMiddleware(): Middleware {
    return (_req, res, next) => {
      const { routeMethod } = res.locals;

      setTimeout(next, this.resolveRouteDelay(routeMethod));
    };
  }
}
